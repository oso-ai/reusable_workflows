name: unit_tests_prod
on:
  workflow_call:
    secrets:
        AWS_ACCESS_KEY_ID:
          required: true
        AWS_SECRET_ACCESS_KEY:
          required: true
        OSO_UTILS_ACCESS_TOKEN:
          required: false

jobs:
  unit_tests_prod:
    name: unit tests for production
    runs-on: ubuntu-latest
    steps:
      - name: Install libsndfile-dev
        run: sudo apt-get update -y && sudo apt-get install -y libsndfile-dev
      - name: checks
        uses: actions/checkout@v2 # checkout the repository content to github runner.
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.10 #install the python needed

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
        
      - name: fetch
        run: |
          git fetch --prune
          git config pull.rebase true
          git pull origin ${{ steps.extract_branch.outputs.branch }}

      - name: add token for oso_utils if secret is present
        env:
          OSO_UTILS_ACCESS_TOKEN: ${{ secrets.OSO_UTILS_ACCESS_TOKEN }}
        if: env.OSO_UTILS_ACCESS_TOKEN != null
        run: git config --global url."https://${{ secrets.OSO_UTILS_ACCESS_TOKEN }}@github.com".insteadOf "ssh://git@github.com"

      - uses: actions/checkout@v2
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install requirements
        id: install
        if: steps.cache.outputs.cache-hit != 'true'
        run: | # install prod requirements, install pytest
          if [ -f install_requirements.sh ]; then
            echo "new requirements system"
            bash install_requirements.sh prod
          elif [ -f requirements_prod.txt ]; then
            echo "Standard requirements system"
            pip install -r requirements_prod.txt
          else
            echo "Neither requirements_prod.txt, neither install_requirements.sh, exiting"
            exit 1
          fi
          pip install pytest
          pip install .
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Dvc pull
        run: |
          pip install dvc['s3']
          dvc pull
          if dvc repro --dry | grep 'Running stage'
          then
              echo "dvc is not up to date !"
              exit 1
          fi

      - name: unit test
        run: |
          pip freeze
          echo "pytest"
          pytest -v unit_tests/test_prod.py

name: report_metrics
on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID_CML:
        required: true
      AWS_SECRET_ACCESS_KEY_CML:
        required: true
    inputs:
      detector_name:
        required: false
        type: string
      training_targets:
        required: false
        type: string
        default: data/training_targets.csv
      test_targets:
        required: false
        type: string
        default: data/test_targets.csv
      validation_targets:
        required: false
        type: string
        default: empty
      metrics:
        required: false
        type: string
        default: metrics/metrics.json
      plots:
        required: false
        type: string
        default: plots
      cost:
        required: False
        type: string
        default: empty
      metric_name:
        required: False
        type: string
        default: Pcc
      graph:
        required: False
        type: string
        default: empty

jobs:
  run:
    runs-on: [ubuntu-latest]
    container: docker://dvcorg/cml:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CML }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CML }}
          aws-region: eu-west-3

      - name: dvc_pull
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global --add safe.directory /__w/${{ inputs.detector_name }}/${{ inputs.detector_name }}
          git fetch --prune

          # install dvc[s3]
          pip install dvc[s3] --use-deprecated=legacy-resolver

          # Pull only metrics files or plots, as we are not interested by trained model and training data
          # ignore if not exist

      - name: is_better
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        run: |


          # Add metrics diff table to the report
          echo "## Métriques" >> report.md

          if [ ${GITHUB_REF#refs/heads/} = "main" ]
          then
            branch="build"
          else
            branch="main"
          fi

          if [ -e is_better.py ]
          then
            if dvc metrics diff $branch --targets ${{ inputs.metrics }} --show-md --no-path --all;
            then
              pip install scipy
              dvc pull ${{ inputs.test_targets }}
              dvc pull ${{ inputs.metrics }}
              old=$(dvc metrics diff $branch --targets ${{ inputs.metrics }} --show-md --no-path --all | grep "${{ inputs.metric_name }}.average" |  tr -d " \t\n\r" | cut -d '|' -f 3)
              new=$(dvc metrics diff $branch --targets ${{ inputs.metrics }} --show-md --no-path --all | grep "${{ inputs.metric_name }}.average" |  tr -d " \t\n\r" | cut -d '|' -f 4)
              n_test=$(tail ${{ inputs.test_targets }} -n +2 | wc -l)
              python3 is_better.py $old $new $n_test
              echo "Comparison branch $branch"
              echo "Probability to get an equal or larger ${{ inputs.metric_name }} difference if scores follows a normal law (random performance):" >> report.md
              cat /tmp/proba.txt >> report.md
            fi
          fi

      - name: cml_run_metrics
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ inputs.metrics != 'empty' }}
        run: |
          if [ ${GITHUB_REF#refs/heads/} = "main" ]
          then
            branch="build"
          else
            branch="main"
          fi
          echo >> report.md
          echo >> report.md
          dvc pull ${{ inputs.metrics }}
          dvc metrics diff $branch --targets ${{ inputs.metrics }} --show-md --no-path --all > /tmp/metrics_diff_result.md
          head -n 2 /tmp/metrics_diff_result.md >> report.md
          grep ${{ inputs.metric_name }} /tmp/metrics_diff_result.md >> report.md

      - name: cml_run_plots
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ inputs.plots != 'empty' }}
        run: |

          dvc pull ${{ inputs.plots }}

          if [ ${GITHUB_REF#refs/heads/} = "main" ]
          then
            branch="build"
          else
            branch="main"
          fi

          # Add confusion matrices to the report
          echo "## Matrices de confusion" >> report.md
          for file in ${{ inputs.plots }}/confusion_*.csv
          do
            echo $file
            file_basename=$(basename -- $file)
            filename=${file_basename%.*}
            echo "### $filename" | sed 's/confusion_//' >> report.md
            vega_path="/tmp/${filename}.json"
            echo $vega_path
            if dvc plots diff --targets $file --template confusion -x truth -y predicted --show-vega $branch > $vega_path; then
                echo "The difference between confusion matrix of current branch and $branch branch has been created successfully"
            else
                echo "The corresponding confusion matrix seems to be unavailable on branch $branch, only the confusion matrix of the current branch will be displayed"
                dvc plots show $file --template confusion -x truth -y predicted --show-vega > $vega_path
            fi
            vl2png $vega_path -s 1.0 > plot.png
            cml asset publish --md plot.png >> report.md
          done


          # # Publish Roc 
          for file in ${{ inputs.plots }}/ROC_*.json
          do
            echo $file
            file_basename=$(basename -- $file)
            filename=${file_basename%.*}
            vega_path="/tmp/${filename}.json"
            echo $vega_path
            echo "### $filename" | sed 's/ROC_//' >> report.md        
            if dvc plots diff --targets $file -x Fpr --x-label "False positive rate"  -y Tpr --y-label "True positive rate" --show-vega $branch > $vega_path; then
              echo "The difference between ROC curve of current branch and $branch branch has been created successfully"
            else
              echo "The corresponding ROC curve seems to be unavailable on branch $branch, only the ROC curve of the current branch will be displayed"
              dvc plots show $file -x Fpr --x-label "False positive rate"  -y Tpr --y-label "True positive rate" --show-vega > $vega_path
              echo "Done"
            fi
            vl2png $vega_path -s 1.0 > plot.png
            cml asset publish --md plot.png >> report.md
          done


      - name: cml_run_training_targets
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ inputs.training_targets != 'empty' }}
        run: |
          # Add informations about data in report
          echo "## Données\n" >> report.md
          echo "Sur cette branche :\n" >> report.md
          dvc pull ${{ inputs.training_targets }}
          n_training=$(tail ${{ inputs.training_targets }} -n +2 | wc -l)
          echo "**Training** : $n_training\n" >> report.md

      - name: cml_run_validation_targets
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ inputs.validation_targets != 'empty' }}
        run: |
          dvc pull ${{ inputs.validation_targets }}
          n_validation=$(tail ${{ inputs.validation_targets }} -n +2 | wc -l)
          echo "**Validation** : $n_validation\n" >> report.md

      - name: cml_run_test_targets
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ inputs.test_targets != 'empty' }}
        run: |

          dvc pull ${{ inputs.test_targets }}

          n_test=$(tail ${{ inputs.test_targets }} -n +2 | wc -l)
          echo "**Test** : $n_test\n" >> report.md



      - name: cml_run_cost
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ inputs.cost != 'empty' }}
        run: |
          if [ ${GITHUB_REF#refs/heads/} = "main" ]
          then
            branch="build"
          else
            branch="main"
          fi

          dvc pull ${{ inputs.cost }}
          # Add stats on prod cost
          echo >> report.md
          dvc metrics diff $branch --targets ${{ inputs.cost }} --show-md --no-path --all > /tmp/metrics_diff_result.md
          cat /tmp/metrics_diff_result.md >> report.md


      - name: cml_run_graph
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ inputs.graph != 'empty' }}
        run: |
          dvc pull ${{ inputs.graph }}
          echo >> report.md
          echo "<span style="color:green">*Local link (versions)*</span>" >> report.md
          echo "<span style="color:red">*Prod link (execVersions)*</span>" >> report.md
          cml asset publish --md ${{ inputs.graph }} >> report.md
          echo >> report.md


      - name: cml_run_dag_and_export
        env:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add DVC DAG
          echo >> report.md
          dvc dag --md >> report.md
          # Publish report
          if [ ${GITHUB_REF#refs/heads/} = "main" ]
          then
            echo "branch main"
            cml comment create --target=commit/$GITHUB_SHA report.md
          else
            echo "pull request"
            cml comment create --update report.md
          fi
